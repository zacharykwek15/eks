name: Deploy Infrastructure

on:
  workflow_dispatch:  # keep manual trigger
    inputs:
      environment:
        type: choice
        description: Select the environment
        options:
          - dev


permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1

jobs:
  terraform-deploy-infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Deploy VPC
        working-directory: ./vpc
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan -var-file=${{ github.event.inputs.environment }}.tfvars
          terraform apply -var-file=${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Capture VPC Outputs
        working-directory: ./vpc
        run: |
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV


      - name: Deploy EKS
        working-directory: ./eks
        env:
          TF_VAR_vpc_id: ${{ env.VPC_ID }}
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan -var-file=${{ github.event.inputs.environment }}.tfvars
          terraform apply -var-file=${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Capture EKS Outputs
        working-directory: ./eks
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_ENV


      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Delete gp2 Storage Class
        run: kubectl delete storageclass gp2
        continue-on-error: true


      - name: Update aws-auth ConfigMap with IAM User ARNs
        run: |
          set -euxo pipefail   @safer debugging
          # Pull the IAM ARN from GitHub Secrets
          MY_ARN="${AWS_IAM_ROLE}"

          # Extract username (everything after last /)
          USERNAME="${MY_ARN##*/}"

          # Get existing aws-auth ConfigMap
          kubectl get configmap aws-auth -n kube-system -o yaml > aws-auth.yaml

          # Check if ARN already exists
          if ! grep -q "$MY_ARN" aws-auth.yaml; then
            # Append new IAM user mapping
            yq eval ".data.mapUsers += \"- userarn: $MY_ARN\n  username: $USERNAME\n  groups:\n    - system:masters\n\"" aws-auth.yaml > modified_aws_auth.yaml

            echo "✅ Adding $MY_ARN to aws-auth ConfigMap"
            kubectl apply -f modified_aws_auth.yaml
          else
            echo "⚡ $MY_ARN already exists in aws-auth. Skipping."
          fi

          # Verify update
          kubectl get configmap aws-auth -n kube-system -o yaml
        env:
          AWS_IAM_ROLE: ${{ secrets.AWS_IAM_ROLE }}

      #Verify IAM role 
      - name: Verify IAM Access
        run: kubectl get ns 

      - name: Install Helm 
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install Prometheus and Grafana via Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

          # Prometheus
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring --create-namespace \
            --set server.service.type=LoadBalancer \
            --set alertmanager.service.type=LoadBalancer \
            --set pushgateway.service.type=ClusterIP   # optional, usually not needed externally


          # Grafana
          helm upgrade --install grafana grafana/grafana \
          --namespace monitoring --create-namespace \
          --set service.type=LoadBalancer \
          --set adminUser=admin \
          --set adminPassword=YourSecurePassword      ###We can change this password to whatever we wan in our environment