name: Deploy Infrastructure

on:
  push:
    branches:
      - main        # automatically run on pushes to main
  workflow_dispatch:  # keep manual trigger
    inputs:
      environment:
        type: choice
        description: Select the environment
        options:
          - dev


permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-southeast-1

jobs:
  terraform-deploy-infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: github-run-id-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Deploy VPC
        working-directory: ./vpc
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan -var-file=${{ github.event.inputs.environment }}.tfvars
          terraform apply -var-file=${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Capture VPC Outputs
        working-directory: ./vpc
        run: |
          echo "VPC_ID=$(terraform output -raw vpc_id)" >> $GITHUB_ENV


      - name: Deploy EKS
        working-directory: ./eks
        env:
          TF_VAR_vpc_id: ${{ env.VPC_ID }}
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan -var-file=${{ github.event.inputs.environment }}.tfvars
          terraform apply -var-file=${{ github.event.inputs.environment }}.tfvars --auto-approve

      - name: Capture EKS Outputs
        working-directory: ./eks
        run: |
          echo "CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
          echo "CLUSTER_ENDPOINT=$(terraform output -raw cluster_endpoint)" >> $GITHUB_ENV

      - name: Deploy Kubernetes Resources
        working-directory: ./k8s
        env:
          TF_VAR_region: ${{ env.AWS_REGION }}
          TF_VAR_cluster_name: ${{ env.CLUSTER_NAME }}
        run: |
          terraform init
          terraform workspace select -or-create ${{ github.event.inputs.environment }}
          terraform workspace list
          terraform validate
          terraform plan
          terraform apply --auto-approve

      - name: Setup Kubeconfig
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      - name: Delete gp2 Storage Class
        run: kubectl delete storageclass gp2
        continue-on-error: true

      - name: Update aws-auth ConfigMap with IAM User ARNs
        run: |
          set -x  # Enable shell debugging

          # Convert the environment variable to an array
          IFS=',' read -r -a IAM_USER_ARNS <<< "$IAM_USER_ARNS"

          # Loop through the IAM user ARNs and update aws-auth
          for arn in "${IAM_USER_ARNS[@]}"; do
            echo "Adding ARN: $arn to aws-auth"
            
            # Print out the ARN and the extracted username for debugging
            echo "ARN: $arn"
            echo "Username: ${arn##*/}"
            
            # Get the existing ConfigMap and modify it with yq
            kubectl get configmap aws-auth -n kube-system -o yaml -v=9 | \
              yq eval ".data.mapUsers += \"- userarn: $arn\n  username: ${arn##*/}\n  groups:\n    - system:masters\n\"" > modified_aws_auth.yaml

            # Print the modified YAML to verify changes before applying
            echo "Modified aws-auth ConfigMap:"
            cat modified_aws_auth.yaml

            # Apply the updated ConfigMap
            kubectl apply -f modified_aws_auth.yaml
          done
        env:
          IAM_USER_ARNS: ${{ secrets.IAM_USER_ARNS }}